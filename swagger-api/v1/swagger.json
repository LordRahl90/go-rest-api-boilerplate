{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "the purpose of this application is to provide an application\nthat is using plain go code to define an API\n\nThis should demonstrate all the possible comment annotations\nthat are available to turn go code into a fully compliant swagger 2.0 spec",
    "title": "People API.",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "contact": {
      "name": "Jean-Thierry Bonhomme",
      "url": "http://john.doe.com",
      "email": "jtbonhomme@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "host": "localhost:3000",
  "basePath": "/v1",
  "paths": {
    "/people": {
      "get": {
        "description": "This will show all available recorded people.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "people"
        ],
        "summary": "Lists all people.",
        "operationId": "listPeople",
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/people/{id}": {
      "get": {
        "description": "This will show the record of an identified person.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "people"
        ],
        "summary": "Lists person with id {id}.",
        "operationId": "listPerson",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "The ID of a person",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    }
  },
  "responses": {
    "genericError": {
      "description": "A GenericError is a swagger response to represent any kind of error",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "Code"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "notFoundError": {
      "description": "A NotFoundError is a swagger response to represent error when resource is not found",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "Code"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "okResponse": {
      "description": "An OkError is a swagger response to represent the standard response when no problem occurred",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "x-go-name": "Code"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    }
  }
}